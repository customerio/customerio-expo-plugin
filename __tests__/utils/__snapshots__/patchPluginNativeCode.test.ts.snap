// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Native SDK Configuration Patching patchNativeSDKInitializer() snapshots iOS complete 1`] = `
"import CioDataPipelines
import CioInternalCommon
import CioMessagingInApp

class CustomerIOSDKInitializer {
    static func initialize() {
        // Override SDK client info to include Expo metadata in user agent
        let pluginVersion = "2.5.0"
        DIGraphShared.shared.override(
            value: CustomerIOSdkClient(source: "Expo", sdkVersion: pluginVersion),
            forType: SdkClient.self
        )

        let cdpApiKey = "test-api-key"
        let siteId: String? = "test-site-123"
        let region = CioInternalCommon.Region.getRegion(from: "US")

        let builder = SDKConfigBuilder(cdpApiKey: cdpApiKey)
        setIfDefined(value: "debug", thenPassItTo: builder.logLevel, transformingBy: CioLogLevel.getLogLevel)
        setIfDefined(value: region, thenPassItTo: builder.region)
        setIfDefined(value: true, thenPassItTo: builder.autoTrackDeviceAttributes)
        setIfDefined(value: false, thenPassItTo: builder.trackApplicationLifecycleEvents)
        setIfDefined(value: "inapp", thenPassItTo: builder.screenViewUse) { ScreenView.getScreenView($0) }
        setIfDefined(value: "test-site-123", thenPassItTo: builder.migrationSiteId)

        CustomerIO.initialize(withConfig: builder.build())

        if let siteId = siteId {
            let inAppConfig = MessagingInAppConfigBuilder(siteId: siteId, region: region).build()
            MessagingInApp.initialize(withConfig: inAppConfig)
            // Retrieves ReactInAppEventListener from DI graph, populated when it is accessed in React Native SDK.
            if let listener: InAppEventListener? = DIGraphShared.shared.getOverriddenInstance() {
                MessagingInApp.shared.setEventListener(listener)
            }
        }
    }

    /// Apply a value to a setter only if it's non-nil
    private static func setIfDefined<Raw>(
        value rawValue: Raw?,
        thenPassItTo handler: (Raw) -> Any
    ) {
        setIfDefined(value: rawValue, thenPassItTo: handler) { $0 }
    }

    /// Apply a value after transforming it, only if both the original and transformed values are non-nil
    private static func setIfDefined<Raw, Transformed>(
        value rawValue: Raw?,
        thenPassItTo handler: (Transformed) -> Any,
        transformingBy transform: (Raw) -> Transformed?
    ) {
        if let value = rawValue, let result = transform(value) {
            _ = handler(result)
        }
    }
}
"
`;

exports[`Native SDK Configuration Patching patchNativeSDKInitializer() snapshots iOS minimal 1`] = `
"import CioDataPipelines
import CioInternalCommon
import CioMessagingInApp

class CustomerIOSDKInitializer {
    static func initialize() {
        // Override SDK client info to include Expo metadata in user agent
        let pluginVersion = "2.5.0"
        DIGraphShared.shared.override(
            value: CustomerIOSdkClient(source: "Expo", sdkVersion: pluginVersion),
            forType: SdkClient.self
        )

        let cdpApiKey = "test-api-key"
        let siteId: String? = nil
        let region = CioInternalCommon.Region.getRegion(from: "")

        let builder = SDKConfigBuilder(cdpApiKey: cdpApiKey)
        setIfDefined(value: nil, thenPassItTo: builder.logLevel, transformingBy: CioLogLevel.getLogLevel)
        setIfDefined(value: region, thenPassItTo: builder.region)
        setIfDefined(value: nil, thenPassItTo: builder.autoTrackDeviceAttributes)
        setIfDefined(value: nil, thenPassItTo: builder.trackApplicationLifecycleEvents)
        setIfDefined(value: nil, thenPassItTo: builder.screenViewUse) { ScreenView.getScreenView($0) }
        setIfDefined(value: nil, thenPassItTo: builder.migrationSiteId)

        CustomerIO.initialize(withConfig: builder.build())

        if let siteId = siteId {
            let inAppConfig = MessagingInAppConfigBuilder(siteId: siteId, region: region).build()
            MessagingInApp.initialize(withConfig: inAppConfig)
            // Retrieves ReactInAppEventListener from DI graph, populated when it is accessed in React Native SDK.
            if let listener: InAppEventListener? = DIGraphShared.shared.getOverriddenInstance() {
                MessagingInApp.shared.setEventListener(listener)
            }
        }
    }

    /// Apply a value to a setter only if it's non-nil
    private static func setIfDefined<Raw>(
        value rawValue: Raw?,
        thenPassItTo handler: (Raw) -> Any
    ) {
        setIfDefined(value: rawValue, thenPassItTo: handler) { $0 }
    }

    /// Apply a value after transforming it, only if both the original and transformed values are non-nil
    private static func setIfDefined<Raw, Transformed>(
        value rawValue: Raw?,
        thenPassItTo handler: (Transformed) -> Any,
        transformingBy transform: (Raw) -> Transformed?
    ) {
        if let value = rawValue, let result = transform(value) {
            _ = handler(result)
        }
    }
}
"
`;

exports[`Native SDK Configuration Patching patchNativeSDKInitializer() snapshots Android complete 1`] = `
"package io.customer.sdk.expo

import android.app.Application
import io.customer.datapipelines.config.ScreenView
import io.customer.messaginginapp.MessagingInAppModuleConfig
import io.customer.messaginginapp.ModuleMessagingInApp
import io.customer.messagingpush.MessagingPushModuleConfig
import io.customer.messagingpush.ModuleMessagingPushFCM
import io.customer.reactnative.sdk.messaginginapp.ReactInAppEventListener
import io.customer.sdk.CustomerIOBuilder
import io.customer.sdk.core.util.CioLogLevel
import io.customer.sdk.data.model.Region

object CustomerIOSDKInitializer {
    fun initialize(application: Application) = with(
        CustomerIOBuilder(application, "test-api-key")
    ) {
        val siteId: String? = "android-site-456"
        val migrationSiteId: String? = "android-site-456"
        val region = Region.getRegion("EU")

        setIfDefined("info", CustomerIOBuilder::logLevel) { CioLogLevel.getLogLevel(it) }
        setIfDefined(region, CustomerIOBuilder::region)
        setIfDefined(false, CustomerIOBuilder::autoTrackDeviceAttributes)
        setIfDefined(true, CustomerIOBuilder::trackApplicationLifecycleEvents)
        setIfDefined("all", CustomerIOBuilder::screenViewUse) { ScreenView.getScreenView(it) }
        setIfDefined(migrationSiteId, CustomerIOBuilder::migrationSiteId)

        // Add messaging modules if siteId is provided
        if (!(siteId.isNullOrBlank())) {
            addCustomerIOModule(
                ModuleMessagingInApp(
                    MessagingInAppModuleConfig.Builder(siteId, region)
                        .setEventListener(ReactInAppEventListener())
                        .build()
                )
            )
        }
        addCustomerIOModule(
            ModuleMessagingPushFCM(
                MessagingPushModuleConfig.Builder().build()
            )
        )

        build()
    }
}

// Apply a value after transforming it, only if both the original and transformed values are non-nil
private inline fun <R, T> CustomerIOBuilder.setIfDefined(
    value: R?,
    block: CustomerIOBuilder.(T) -> CustomerIOBuilder,
    transform: (R) -> T,
): CustomerIOBuilder = value?.let { block(transform(it)) } ?: this

// Apply a value to a setter only if it's non-nil
private inline fun <T> CustomerIOBuilder.setIfDefined(
    value: T?,
    block: CustomerIOBuilder.(T) -> CustomerIOBuilder,
): CustomerIOBuilder = setIfDefined(
    value = value,
    block = block,
    transform = { it },
)
"
`;

exports[`Native SDK Configuration Patching patchNativeSDKInitializer() snapshots Android minimal 1`] = `
"package io.customer.sdk.expo

import android.app.Application
import io.customer.datapipelines.config.ScreenView
import io.customer.messaginginapp.MessagingInAppModuleConfig
import io.customer.messaginginapp.ModuleMessagingInApp
import io.customer.messagingpush.MessagingPushModuleConfig
import io.customer.messagingpush.ModuleMessagingPushFCM
import io.customer.reactnative.sdk.messaginginapp.ReactInAppEventListener
import io.customer.sdk.CustomerIOBuilder
import io.customer.sdk.core.util.CioLogLevel
import io.customer.sdk.data.model.Region

object CustomerIOSDKInitializer {
    fun initialize(application: Application) = with(
        CustomerIOBuilder(application, "test-api-key")
    ) {
        val siteId: String? = null
        val migrationSiteId: String? = null
        val region = Region.getRegion("")

        setIfDefined(null, CustomerIOBuilder::logLevel) { CioLogLevel.getLogLevel(it) }
        setIfDefined(region, CustomerIOBuilder::region)
        setIfDefined(null, CustomerIOBuilder::autoTrackDeviceAttributes)
        setIfDefined(null, CustomerIOBuilder::trackApplicationLifecycleEvents)
        setIfDefined(null, CustomerIOBuilder::screenViewUse) { ScreenView.getScreenView(it) }
        setIfDefined(migrationSiteId, CustomerIOBuilder::migrationSiteId)

        // Add messaging modules if siteId is provided
        if (!(siteId.isNullOrBlank())) {
            addCustomerIOModule(
                ModuleMessagingInApp(
                    MessagingInAppModuleConfig.Builder(siteId, region)
                        .setEventListener(ReactInAppEventListener())
                        .build()
                )
            )
        }
        addCustomerIOModule(
            ModuleMessagingPushFCM(
                MessagingPushModuleConfig.Builder().build()
            )
        )

        build()
    }
}

// Apply a value after transforming it, only if both the original and transformed values are non-nil
private inline fun <R, T> CustomerIOBuilder.setIfDefined(
    value: R?,
    block: CustomerIOBuilder.(T) -> CustomerIOBuilder,
    transform: (R) -> T,
): CustomerIOBuilder = value?.let { block(transform(it)) } ?: this

// Apply a value to a setter only if it's non-nil
private inline fun <T> CustomerIOBuilder.setIfDefined(
    value: T?,
    block: CustomerIOBuilder.(T) -> CustomerIOBuilder,
): CustomerIOBuilder = setIfDefined(
    value = value,
    block = block,
    transform = { it },
)
"
`;
