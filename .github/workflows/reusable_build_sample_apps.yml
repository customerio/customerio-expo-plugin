name: Reusable build sample apps workflow

on:
  workflow_call:
    inputs:
      use_latest_sdk_version:
        description: "Whether this workflow should build sample apps with latest SDK version or source code"
        type: boolean
        required: false
        default: false

jobs:
  build-android-app:
    name: Build and publish Android app
    runs-on: ubuntu-latest
    env:
      GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64: ${{ secrets.GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64 }}
      FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64: ${{ secrets.FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64 }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Workaround for bug https://github.com/actions/checkout/issues/1471

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      
      - name: Capture Git Context
        shell: bash
        id: git-context
        run: |
          echo "BRANCH_NAME=${{ github.head_ref || github.ref_name }}" >> $GITHUB_ENV
          COMMIT_HASH="${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}"
          echo "COMMIT_HASH=${COMMIT_HASH:0:7}" >> $GITHUB_ENV
          echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Set Default Firebase Distribution Groups
        shell: bash
        env:
          # Distribution group constants
          ALL_BUILDS_GROUP: all-builds
          FEATURE_BUILDS_GROUP: feature-branch
          NEXT_BUILDS_GROUP: next
          PUBLIC_BUILDS_GROUP: public
          # Input variables
          CURRENT_BRANCH: ${{ github.ref }}
          USE_LATEST_SDK_VERSION: ${{ inputs.use_latest_sdk_version }}
        run: |
          # Initialize with the default distribution group
          distribution_groups=("$ALL_BUILDS_GROUP")

          # Determine current app type and git context
          [[ "$CURRENT_BRANCH" == "refs/heads/feature/"* ]] && distribution_groups+=("$FEATURE_BUILDS_GROUP")
          [[ "$CURRENT_BRANCH" == "refs/heads/master" || "$CURRENT_BRANCH" == "refs/heads/beta" ]] && distribution_groups+=("$NEXT_BUILDS_GROUP")
          [[ "$USE_LATEST_SDK_VERSION" == "true" ]] && distribution_groups+=("$PUBLIC_BUILDS_GROUP")

          # Export the groups as an environment variable
          echo "firebase_distribution_groups=$(IFS=','; echo "${distribution_groups[*]}")" >> $GITHUB_ENV

      - name: Setup local.env file for sample app
        if: ${{ inputs.use_latest_sdk_version == true }}
        run: |
          touch "test-app/local.env"
          echo "sdkVersion=${{ env.LATEST_TAG }}" >> "test-app/local.env"

      - name: Install tools from Gemfile (ruby language) used for building our apps with
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Install sd CLI to use later in the workflow
        uses: kenji-miyake/setup-sd@v2

      - name: Bundle install
        working-directory: test-app
        run: bundle install

      - name: Update test app version # This has to happen before we generate the native app
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: update_expo_test_app_version
          subdirectory: test-app
          options: ${{ inputs.use_latest_sdk_version == true && format('{{"sdk_version":"{0}"}}', env.LATEST_TAG) || '' }}

      - name: Install plugin dependencies
        working-directory: plugin
        run: npm ci

      - name: Setup test project
        run: npm run setup-test-app

      - name: Setup CIO workspace credentials in test apps config
        run: |
          APP_JSON_FILE="test-app/app.json"
          sd "\"buildTimestamp\": .*" "\"buildTimestamp\": $(date +%s)," "$APP_JSON_FILE"
          sd "\"cdpApiKey\".*" "\"cdpApiKey\": \"${{ secrets.CUSTOMERIO_EXPO_WORKSPACE_CDP_API_KEY }}\"," "$APP_JSON_FILE"
          sd "\"siteId\".*" "\"siteId\": \"${{ secrets.CUSTOMERIO_EXPO_WORKSPACE_SITE_ID }}\"," "$APP_JSON_FILE"
          sd "\"workspaceName\".*" "\"workspaceName\": \"Mobile: Expo\"," "$APP_JSON_FILE"
          sd "\"branchName\".*" "\"branchName\": \"${{ env.BRANCH_NAME }}\"," "$APP_JSON_FILE"
          sd "\"commitHash\".*" "\"commitHash\": \"${{ env.COMMIT_HASH }}\"," "$APP_JSON_FILE"
          LAST_TAG="${LATEST_TAG:-untagged}"
          COMMITS_AHEAD=$(git rev-list $LAST_TAG..HEAD --count 2>/dev/null || echo "untracked")
          sd "\"commitsAheadCount\".*" "\"commitsAheadCount\": \"$COMMITS_AHEAD\"," "$APP_JSON_FILE"

      - name: Build Android app with fastlane
        id: android_build
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: android build
          subdirectory: test-app
          options: '{"distribution_groups": "${{ env.firebase_distribution_groups }}"}'
        env:
          FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64: ${{ secrets.FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64 }}

      - name: Send Slack Notification for Sample App Builds (Android)
        if: ${{ always() }}
        uses: customerio/mobile-ci-tools/github-actions/slack-notify-sample-app/v1@main
        with:
          build_status: ${{ steps.android_build.outcome }}
          app_icon_emoji: ":expo:"
          app_name: "Expo"
          firebase_app_id: ${{ secrets.SAMPLE_APP_FIREBASE_APP_ID_ANDROID }}
          firebase_distribution_groups: ${{ env.firebase_distribution_groups }}
          git_context: "${{ env.BRANCH_NAME }} (${{ env.COMMIT_HASH }})"
          icon_url: "https://logos-download.com/wp-content/uploads/2021/01/Expo_Logo.png"
          instructions_guide_link: ${{ secrets.SAMPLE_APPS_INSTRUCTIONS_GUIDE_LINK }}
          platform: "android"
          sdk_name: "Expo Plugin"
          sdk_version: ${{ env.LATEST_TAG }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-ios-app:
    name: Build and publish iOS app
    runs-on: macos-14
    strategy:
      matrix:
        push_provider: [fcm, apn]
    env:
      GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64: ${{ secrets.GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64 }}
      FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64: ${{ secrets.FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64 }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Workaround for bug https://github.com/actions/checkout/issues/1471

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Capture Git Context
        shell: bash
        id: git-context
        run: |
          echo "BRANCH_NAME=${{ github.head_ref || github.ref_name }}" >> $GITHUB_ENV
          COMMIT_HASH="${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}"
          echo "COMMIT_HASH=${COMMIT_HASH:0:7}" >> $GITHUB_ENV
          echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Set Default Firebase Distribution Groups
        shell: bash
        env:
          # Distribution group constants
          ALL_BUILDS_GROUP: all-builds
          FEATURE_BUILDS_GROUP: feature-branch
          NEXT_BUILDS_GROUP: next
          PUBLIC_BUILDS_GROUP: public
          # Input variables
          CURRENT_BRANCH: ${{ github.ref }}
          USE_LATEST_SDK_VERSION: ${{ inputs.use_latest_sdk_version }}
        run: |
          # Initialize with the default distribution group
          distribution_groups=("$ALL_BUILDS_GROUP")

          # Determine current app type and git context
          [[ "$CURRENT_BRANCH" == "refs/heads/feature/"* ]] && distribution_groups+=("$FEATURE_BUILDS_GROUP")
          [[ "$CURRENT_BRANCH" == "refs/heads/master" || "$CURRENT_BRANCH" == "refs/heads/beta" ]] && distribution_groups+=("$NEXT_BUILDS_GROUP")
          
          if [[ ${{ matrix.push_provider }} == "apn" && "$USE_LATEST_SDK_VERSION" == "true" ]]; then
            distribution_groups+=("$PUBLIC_BUILDS_GROUP")
          fi

          # Export the groups as an environment variable
          echo "firebase_distribution_groups=$(IFS=','; echo "${distribution_groups[*]}")" >> $GITHUB_ENV

      - name: Setup local.env file for sample app
        shell: bash
        run: |
          touch "test-app/local.env"
          if [ "${{ inputs.use_latest_sdk_version }}" == "true" ]; then
            echo "sdkVersion=${{ env.LATEST_TAG }}" >> "test-app/local.env"
          fi
          echo "pushProvider=${{ matrix.push_provider }}" >> "test-app/local.env"

      - name: Install XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.3"
      
      - name: Install tools from Gemfile (ruby language) used for building our apps with
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Install SD CLI
        run: brew install sd

      - name: Bundle install
        working-directory: test-app
        run: bundle install

      - name: Update test app version # This has to happen before we generate the native app
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: update_expo_test_app_version
          subdirectory: test-app
          options: ${{ inputs.use_latest_sdk_version == true && format('{{"sdk_version":"{0}"}}', env.LATEST_TAG) || '' }}

      - name: Install plugin dependencies
        working-directory: plugin
        run: npm ci

      - name: Setup test project
        run: npm run setup-test-app

      - name: Setup CIO workspace credentials in test apps config
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
          COMMIT_HASH: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
        run: |
          APP_JSON_FILE="test-app/app.json"
          sd "\"buildTimestamp\": .*" "\"buildTimestamp\": $(date +%s)," "$APP_JSON_FILE"
          sd "\"workspaceName\".*" "\"workspaceName\": \"Mobile: Expo\"," "$APP_JSON_FILE"
          sd "\"branchName\".*" "\"branchName\": \"${{ env.BRANCH_NAME }}\"," "$APP_JSON_FILE"
          sd "\"commitHash\".*" "\"commitHash\": \"${{ env.COMMIT_HASH }}\"," "$APP_JSON_FILE"
          LAST_TAG="${LATEST_TAG:-untagged}"
          COMMITS_AHEAD=$(git rev-list $LAST_TAG..HEAD --count 2>/dev/null || echo "untracked")
          sd "\"commitsAheadCount\".*" "\"commitsAheadCount\": \"$COMMITS_AHEAD\"," "$APP_JSON_FILE"

          if [ "${{ matrix.push_provider }}" == "fcm" ]; then
            sd "\"cdpApiKey\".*" "\"cdpApiKey\": \"${{ secrets.CUSTOMERIO_RN_FCM_WORKSPACE_CDP_API_KEY }}\"," "$APP_JSON_FILE"
            sd "\"siteId\".*" "\"siteId\": \"${{ secrets.CUSTOMERIO_RN_FCM_WORKSPACE_SITE_ID }}\"," "$APP_JSON_FILE"
          else
            sd "\"cdpApiKey\".*" "\"cdpApiKey\": \"${{ secrets.CUSTOMERIO_EXPO_WORKSPACE_CDP_API_KEY }}\"," "$APP_JSON_FILE"
            sd "\"siteId\".*" "\"siteId\": \"${{ secrets.CUSTOMERIO_EXPO_WORKSPACE_SITE_ID }}\"," "$APP_JSON_FILE"
          fi

      - name: Copy GoogleService-Info.plist to ios project
        run: |
          cp test-app/files/GoogleService-Info.plist test-app/ios/GoogleService-Info.plist
          gem install xcodeproj
          ruby scripts/add-google-service-ios.rb

      - name: Build iOS app with fastlane
        id: ios_build
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: ios build_ios
          subdirectory: test-app
          options: '{"distribution_groups": "${{ env.firebase_distribution_groups }}", "push_provider": "${{ matrix.push_provider }}"}'
        env:
          GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64: ${{ secrets.GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64 }}
          FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64: ${{ secrets.FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64 }}

      - name: Send Slack Notification for Sample App Builds (Android)
        if: ${{ always() }}
        uses: customerio/mobile-ci-tools/github-actions/slack-notify-sample-app/v1@main
        with:
          build_status: ${{ steps.ios_build.outcome }}
          app_icon_emoji: ":expo:"
          app_name: "Expo"
          firebase_app_id: ${{ secrets.SAMPLE_APP_FIREBASE_APP_ID_IOS }}
          firebase_distribution_groups: ${{ env.firebase_distribution_groups }}
          git_context: "${{ env.BRANCH_NAME }} (${{ env.COMMIT_HASH }})"
          icon_url: "https://logos-download.com/wp-content/uploads/2021/01/Expo_Logo.png"
          instructions_guide_link: ${{ secrets.SAMPLE_APPS_INSTRUCTIONS_GUIDE_LINK }}
          platform: "ios"
          sdk_name: "Expo Plugin"
          sdk_version: ${{ env.LATEST_TAG }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
